** MongoDB comands to create a database, users, collections, querys**

show dbs
use nombredelabasdedatos
db

db.createUser({
  user: 'edwin',
  pwd: 'password',
  customData: { startDate: new Date() },
  roles: [
    { role: 'clusterAdmin', db: 'admin' },
    { role: 'readAnyDatabase', db: 'admin' },
    'readWrite'
  ]
})
  
db.getUsers()
db.dropUser('jon')

- Sirve para crear una nueva collection o tabla
- Collections -> se refiere a las tablas
db.createCollection('books')
show collections
  
- Inserta un documento en una collection
- Document -> se refiere a los registro
db.books.insert({
  "name": "OOP Programming",
  "publishedDate": new Date(),
  "authors": [
    {"name": "Jon Snow Jr"},
    {"name": "Ned Stark"}
  ]
})

- Sirve para buscar varios documentos en una colleccion
db.books.insertMany([
  {
    "name": "Confident Ruby",
    "publishedDate": new Date(),
    "authors": [
      { "name": "Avdi Grimm" }
    ]
  },
  {
    "name": "The War of Art",
    "publishedDate": new Date(),
    "authors": [
      {"name": "Steven Pressfield"}
    ]
  },
  {
    "name": "Blink",
    "publishedDate": new Date(),
    "authors": [
      {"name": "Malcolm Gladwell"}
    ]
  }
])

- Sirve para buscar documentos
- Ejemplo SQL: select * from books
db.books.find().pretty()

- Sirve para buscar documento con un parametro
db.books.find( {name: "The War of Art"} ).pretty()
db.books.find( {name: "OOP Programming"} ).pretty()

- Esta sirve para ver solo los campos que quieres ver
- Ejemplo en SQL: select name, authors from books where name = 'Confident Ruby'
db.books.find(
  {
    name: "Confident Ruby"
  },
  {
    _id: 0,
    name: 1,
    authors: 1
  }
).pretty()


db.books.insert({
    "name": "Deep Work: Rules for Focused Success in a Distracted World",
    "publishedDate": new Date(),
    "authors": [
        {"name": "Cal Newport"}
    ]
})

- Sirve para buscar en un string un cierto patron. La letra i se refiere a case insesitive
db.books.findOne({ name: /.*deep work.*/i })

- Para borrar documentos o registros
db.books.remove({name: "OOP Programming"}, 1) // Removes a single document
db.books.remove({name: "OOP Programming"}) // Removes all documents

  
db.books.insert({
    "name": "Blink",
    "publishedDate": new Date(),
    "authors": [
        { "name": "Malcolm Gladwell", "active": "true" },
        { "name": "Ghost Writer", "active": "true" }
    ]
})

- Solo trae el nombre del campo authors, no trae active = true
db.books.find(
  {
    name: "Blink"
  },
  {
    name: 1,
    publishedDate: 1,
    "authors.name": 1
  }
).pretty()

- Para buscar un solo documento o registro
db.books.findOne({ name: "OOP Programming" } )


db.books.insert( 
  {
    "name": "Deep Work: Rules for Focused Success in a Distracted World",
    "publishedDate": new Date(),
    "reviews": 100,
    "authors": [
      {"name": "Cal Newport"}
    ]
  }
)
- Para saber si existe un campo el books o collection o tabla
db.books.find({ reviews: { $exists: true } })
db.books.find({ reviews: { $exists: false } })